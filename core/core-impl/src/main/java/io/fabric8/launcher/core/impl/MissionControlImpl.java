package io.fabric8.launcher.core.impl;

import java.io.IOException;
import java.nio.file.Files;
import java.util.UUID;

import javax.enterprise.inject.Instance;
import javax.inject.Inject;

import io.fabric8.launcher.booster.catalog.rhoar.RhoarBooster;
import io.fabric8.launcher.booster.catalog.rhoar.RhoarBoosterCatalog;
import io.fabric8.launcher.core.api.Boom;
import io.fabric8.launcher.core.api.CreateProjectile;
import io.fabric8.launcher.core.api.CreateProjectileContext;
import io.fabric8.launcher.core.api.ImmutableBoom;
import io.fabric8.launcher.core.api.ImmutableCreateProjectile;
import io.fabric8.launcher.core.api.MissionControl;
import io.fabric8.launcher.core.spi.GitOperations;
import io.fabric8.launcher.core.spi.OpenShiftOperations;
import io.fabric8.launcher.core.spi.ProjectilePreparer;
import io.fabric8.launcher.service.git.api.GitRepository;
import io.fabric8.launcher.service.openshift.api.OpenShiftProject;
import io.fabric8.launcher.tracking.SegmentAnalyticsProvider;

/**
 * Implementation of the {@link MissionControl} interface.
 *
 * @author <a href="mailto:alr@redhat.com">Andrew Lee Rubinger</a>
 */
public class MissionControlImpl implements MissionControl {

    @Inject
    private Instance<ProjectilePreparer> preparers;

    @Inject
    private Instance<GitOperations> gitOperationsInstances;

    @Inject
    private Instance<OpenShiftOperations> openShiftOperationsInstances;

    @Inject
    private SegmentAnalyticsProvider analyticsProvider;

    @Inject
    private RhoarBoosterCatalog catalog;

    @Override
    public CreateProjectile prepare(CreateProjectileContext context) {
        java.nio.file.Path path;
        try {
            path = Files.createTempDirectory("projectDir");
            RhoarBooster booster = catalog.getBooster(context.getMission(), context.getRuntime(), context.getRuntimeVersion())
                    .orElseThrow(IllegalArgumentException::new);
            catalog.copy(booster, path);

            for (ProjectilePreparer preparer : preparers) {
                preparer.prepare(path, context);
            }

            return ImmutableCreateProjectile.builder()
                    .id(UUID.randomUUID())
                    .mission(context.getMission())
                    .runtime(context.getRuntime())
                    .projectLocation(path)
                    .openShiftProjectName(context.getProjectName())
                    .gitRepositoryName(context.getProjectName())
                    .gitRepositoryDescription("Generated by the Red Hat Developer Launch (https://developers.redhat.com/launch)")
                    .build();
        } catch (IOException e) {
            throw new IllegalStateException("Error while preparing projectile", e);
        }
    }

    @Override
    public Boom launch(CreateProjectile projectile) throws IllegalArgumentException {
        int startIndex = projectile.getStartOfStep();
        assert startIndex >= 0 : "startOfStep cannot be negative. Was " + startIndex;

        GitOperations gitOperations = gitOperationsInstances.get();
        OpenShiftOperations openShiftOperations = openShiftOperationsInstances.get();

        // TODO: Use startIndex
        GitRepository gitRepository = gitOperations.createGitRepository(projectile);
        gitOperations.pushToGitRepository(projectile, gitRepository);

        OpenShiftProject openShiftProject = openShiftOperations.createOpenShiftProject(projectile);
        openShiftOperations.configureBuildPipeline(projectile, openShiftProject, gitRepository);

        gitOperations.createWebHooks(projectile, openShiftProject, gitRepository);

        // Call analytics
        analyticsProvider.trackingMessage(projectile);

        return ImmutableBoom
                .builder()
                .createdProject(openShiftProject)
                .createdRepository(gitRepository)
                .build();
    }

}
